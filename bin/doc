#!/bin/bash

# Auxiliary --------------------------------------------------------------------
VERSION=0.1

function notice
{
    echo "none" >/dev/null
}

function debug
{
    echo "$@" >/dev/stdout
}

function fatal
{
    echo "$@"
    exit -1;
}

function usage
{
    local usage_fun=$1; shift;
    local cmd=$1; shift;

    if [[ ! "$cmd" =~  help|--help|-h|^$ ]]; then
        echo "Unknown command: '$cmd'";
    fi

    $usage_fun
}

function toolchain
{
    echo $(readlink -f $(dirname ${BASH_SOURCE[0]})/..)
}

function if_set
{
    local val=$1; shift;
    if ! [ -z "$val" ]; then
        echo "($val)"
    fi
}

function proj
{
    echo $(basename $(pwd))
}

function relpath
{
    local source=$1
    local target=$2

    local common_part=$source # for now
    local result="" # for now

    while [[ "${target#$common_part}" == "${target}" ]]; do
        # no match, means that candidate common part is not correct
        # go up one level (reduce common part)
        common_part="$(dirname $common_part)"
        # and record that we went back, with correct / handling
        if [[ -z $result ]]; then
            result=".."
        else
            result="../$result"
        fi
    done

    if [[ $common_part == "/" ]]; then
        # special case for root (no common path)
        result="$result/"
    fi

    # since we now have identified the common part,
    # compute the non-common part
    forward_part="${target#$common_part}"

    # and now stick all parts together
    if [[ -n $result ]] && [[ -n $forward_part ]]; then
        result="$result$forward_part"
    elif [[ -n $forward_part ]]; then
        # extra slash removal
        result="${forward_part:1}"
    fi

    echo $result
}

function add_dot_make
{
    local force=false
    local toolchain=$(toolchain)

    if [ "$1" == "--force" ]; then
        force=true
    fi

    if [ -f '.Makefile' ]; then
        if $force; then
            chmod +w .Makefile
        else
            fatal "'.Makefile' is already exists"
        fi
    fi

    debug "Populate '.Makefile'..."
    local main=$(relpath $(pwd) $toolchain/makefiles/Makefile.main)
    (
        echo "# Generated using doc $(doc_version)"
        echo "# Do not modify this file manually"
        echo ""
        echo "Makefile.main := $main"
        echo ""
        echo 'ifeq (,$(wildcard ${Makefile.main}))'
        echo "  \$(error toolchain wasn't found, use 'doc make --force' to generate new '.Makefile')"
        echo "endif"
        echo ""
        echo 'include ${Makefile.main}'
    ) > .Makefile
    chmod -w .Makefile
}

function add_make
{
    if ! [ -f Makefile ]; then
        touch Makefile
    fi

    if ! grep -P "^\s*include\s+.Makefile\b" Makefile >/dev/null; then
        debug "Include toolchain to 'Makefile'"
        echo "include .Makefile" >> Makefile
    fi
}

# Doc :: New -------------------------------------------------------------------

function doc_version
{
    echo "$VERSION.$(git --git-dir=$(toolchain)/.git rev-parse --short HEAD)"
}

function doc_new_slides
{
    echo "none" >/dev/null
}

function doc_new_pdf
{
    echo "none" >/dev/null
}

function doc_new_html
{
    echo "none" >/dev/null
}

function doc_new_impl
{
    local template=$1; shift;
    local ext=$1; shift;
    local name=$1; shift;

    local implicit_name=$(proj).${ext};

    if [ -z "$name" ]; then
        name=$implicit_name
    fi

    if ! [[ "$name" =~ ^.+\.${ext}$ ]]; then
        name=$name.${ext}
    fi

    if [ -e "$name" ]; then
        fatal "File with name '$name' is already exists"
    fi

    local doc_name=${DOC_NAME:-$(basename $name .$ext)}

    debug "Creating new $template: '$name'"
    sed -e 's/{{OUTPUT}}/'"$name"'/g' \
        -e 's/{{DOC_NAME}}/'"$doc_name"'/g' \
        -e 's/{{DOC_AUTHOR}}/'"$DOC_AUTHOR"'/g' \
        $(toolchain)/etc/templates/${template} >$name
    if [ "$name" != "$implicit_name" ]; then
        debug "Add '$name' to Makefile"
        sed -e 'b s' \
            \
            -e ':end $q' -e 'N; b end'\
            \
            -e ':s /\\$/{N;b s}' \
            -e ' /'"SOURCE.$ext"'\s*\(:\|+\)\?=\s*/{s/$/ '"$name"'/; b end}' \
            \
            -e ' /include\s\+.Makefile/{i '"SOURCE.$ext"' := '"$name\n"'' -e 'b end}' \
            -i Makefile
    fi
}

function doc_new_plot
{
    doc_new_impl gnuplot plt $@
}

function doc_new_adoc
{
    doc_new_impl asciidoctor adoc $@
}

function doc_new_usage
{
    echo "USAGE"
    echo "  doc new COMMAND - create new document template"
    echo ""
    echo "COMMANDS"
    echo "  slides              - create new slides document"
    echo "  html                - create new article document"
    echo "  pdf                 - create new document"

    echo "  plot name|name.plt  - create new gnuplot file"
    echo "  adoc name|name.adoc - create new asciidoc file"
    echo "  help                - generate this message"
    echo ""
    echo "ENVIRONMENTs"
    echo "  DOC_AUTHOR - Default Author Name" $(if_set $DOC_AUTHOR)
    echo "  DOC_NAME   - Default Document Name" $(if_set $DOC_NAME)
}

# Doc --------------------------------------------------------------------------
function doc_new
{
    local cmd=$1; shift;
    case "$cmd" in
        pdf) doc_new_pdf "$@" ;;
        slides) doc_new_slides "$@";;
        html) doc_new_html "$@";;

        plot|gnuplot) doc_new_plot "$@";;
        *.gpi|*.plt) doc_new_plot "$cmd" "$@";;

        adoc) doc_new_adoc "$@";;
        *.adoc) doc_new_adoc "$cmd" "$@";;

        *) usage doc_new_usage "$cmd";;
    esac
}

function doc_make
{
    add_make "$@"
    add_dot_make "$@"
}

function doc_usage
{
    echo "USAGE"
    echo "  doc COMMAND - asciidoc publishing helper"
    echo ""
    echo "COMMANDS"
    echo "  new     - create new document"
    echo "  make    - generate 'Makefile'"
    echo "  version - print version number"
    echo "  help    - print this message"
}

# Entry ------------------------------------------------------------------------
function main
{
    local cmd=$1; shift;
    case "$cmd" in
        css) doc_css "$@" ;;
        make) doc_make "$@" ;;
        new) doc_new "$@" ;;
        version) doc_version ;;
        --help|help) doc_usage ;;
        *) usage doc_usage "$cmd" ;;
    esac
}

main "$@"


# vim: fdm=marker foldmarker={,}
